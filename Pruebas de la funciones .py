import numpy as np
from qiskit import QuantumCircuit, transpile
from qiskit import Aer
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

print("ANDRES RODRIGUEZ")
def printMat(mat):
    for i in mat:
        print(" ".join(list(map(str, i))))


#Primera Funcion
print("Primera Funcion: 0 -> 0, 1 -> 1")
print("la matriz sera")
printMat([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]])

# Prueba con |00>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.cx(0, 1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |01>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(1)
circuit.barrier()
circuit.cx(0, 1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |10>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.barrier()
circuit.cx(0, 1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |11>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.x(1)
circuit.barrier()
circuit.cx(0, 1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()


# Segunda Funcion
print("Segunda Funcion: 0 -> 1, 1 -> 0")
print("La matriz Sera")
printMat([[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])

# Prueba con |00>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.cx(0, 1)
circuit.x(0)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |01>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(1)
circuit.barrier()
circuit.x(0)
circuit.cx(0, 1)
circuit.x(0)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |10>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.barrier()
circuit.x(0)
circuit.cx(0, 1)
circuit.x(0)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |11>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.x(1)
circuit.barrier()
circuit.x(0)
circuit.cx(0, 1)
circuit.x(0)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()


# Tercera Funcion
print("Tercera Funcion: 0 -> 0, 1 -> 0")
print("La Matriz sera")
printMat([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])

# Prueba con |00>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.barrier()
circuit.i(0)
circuit.i(1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()
print()

# Prueba con |01>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(1)
circuit.barrier()
circuit.i(0)
circuit.i(1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()
print()

# Prueba con |10>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.barrier()
circuit.i(0)
circuit.i(1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()
print()

# Prueba con |11>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.x(1)
circuit.barrier()
circuit.i(0)
circuit.i(1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Cuarta Funcion
print("Cuarta Funcion: 0 -> 1, 1 -> 1")
print("La matriz sera:")
printMat([[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]])

# Prueba con |00>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.cx(0, 1)
circuit.x(0)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |01>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(1)
circuit.barrier()
circuit.x(0)
circuit.cx(0, 1)
circuit.x(0)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |10>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.barrier()
circuit.cx(0, 1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()

# Prueba con |11>
simulator = Aer.get_backend('qasm_simulator')
circuit = QuantumCircuit(2, 2)
circuit.x(0)
circuit.x(1)
circuit.barrier()
circuit.cx(0, 1)
circuit.barrier()
circuit.measure([0, 1], [1, 0])
compiled_circuit = transpile(circuit, simulator)
job = simulator.run(compiled_circuit, shots=1000)
result = job.result()
counts = result.get_counts(circuit)
print(circuit)
plot_histogram(counts)
plt.show()
